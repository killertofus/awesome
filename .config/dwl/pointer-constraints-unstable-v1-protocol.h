/* Generated by wayland-scanner 1.23.1 */

#ifndef POINTER_CONSTRAINTS_UNSTABLE_V1_ENUM_PROTOCOL_H
#define POINTER_CONSTRAINTS_UNSTABLE_V1_ENUM_PROTOCOL_H

#ifdef  __cplusplus
extern "C" {
#endif

#ifndef ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM
#define ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM
/**
 * @ingroup iface_zwp_pointer_constraints_v1
 * wp_pointer_constraints error values
 *
 * These errors can be emitted in response to wp_pointer_constraints
 * requests.
 */
enum zwp_pointer_constraints_v1_error {
	/**
	 * pointer constraint already requested on that surface
	 */
	ZWP_POINTER_CONSTRAINTS_V1_ERROR_ALREADY_CONSTRAINED = 1,
};
#endif /* ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM */

#ifndef ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM
#define ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM
/**
 * @ingroup iface_zwp_pointer_constraints_v1
 * constraint lifetime
 *
 * These values represent different lifetime semantics. They are passed
 * as arguments to the factory requests to specify how the constraint
 * lifetimes should be managed.
 */
enum zwp_pointer_constraints_v1_lifetime {
	/**
	 * the pointer constraint is defunct once deactivated
	 *
	 * A oneshot pointer constraint will never reactivate once it has
	 * been deactivated. See the corresponding deactivation event
	 * (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined)
	 * for details.
	 */
	ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT = 1,
	/**
	 * the pointer constraint may reactivate
	 *
	 * A persistent pointer constraint may again reactivate once it
	 * has been deactivated. See the corresponding deactivation event
	 * (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined)
	 * for details.
	 */
	ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT = 2,
};
#endif /* ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM */

#ifdef  __cplusplus
}
#endif

#endif
